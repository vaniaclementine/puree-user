generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  password String?
  phone    String?
  // emailVerified DateTime?
  image    String?
  balance  Int?
  // accounts      Account[]
  Driver   Driver?
  Merchant Merchant?
  Cart     Cart?
  // sessions      Session[]
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model Address {
  id             String   @id @default(cuid())
  province       String
  city           String
  address_line_1 String
  merchantId     String   @unique
  Merchant       Merchant @relation(fields: [merchantId], references: [userId])
}

model Driver {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  // balance   Int?
  userId    String    @unique
  User      User      @relation(fields: [userId], references: [id])
  Vehicle   Vehicle[]
}

model Item {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Int
  picture     String?
  merchantId  String
  Merchant    Merchant    @relation(fields: [merchantId], references: [id])
  order       OrderItem[]
  CartItem    CartItem[]
}

model Cart {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  cartItems  CartItem[]
  totalPrice Float

  // one to one
  userId String @unique
  User   User   @relation(fields: [userId], references: [id])
}

model Merchant {
  id      String   @id @default(cuid())
  // balance  String?
  userId  String   @unique
  Address Address?
  Item    Item[]
  User    User     @relation(fields: [userId], references: [id])
}

model Vehicle {
  id          String   @id @default(cuid())
  plateNumber String   @unique
  brand       String
  series      String
  color       String
  year        DateTime
  driverId    String
  Driver      Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

model Order {
  id         String      @id @default(cuid())
  orderItems OrderItem[]
  totalPrice Float

  createdAt  DateTime   @default(now())
  orderEnd   DateTime   @updatedAt
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  itemId   String
  quantity Int

  order Order @relation(fields: [orderId], references: [id])
  item  Item  @relation(fields: [itemId], references: [id])
}

model CartItem {
  id       String @id @default(cuid())
  cart     Cart   @relation(fields: [cartId], references: [id])
  item     Item   @relation(fields: [itemId], references: [id])
  cartId   String
  itemId   String
  quantity Int
}
